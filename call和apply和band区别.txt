1. 说说你对this关键字的理解？
this 是一个关键字，它代表函数运行时，自动生成的一个内部对象，只能在函数内 部使用。
1.作为纯粹的函数调用 this 指向全局对象
2.作为对象的方法调用 this 指向调用对象
3.作为构造函数被调用 this 指向新的对象（new会改变 this 的指向）
4.apply 调用 this 指向 apply方法的第一个参数

改变函数内this指向

 call和apply的区别？
它们的共同之处：都“可以用来代替另一个对象调用一个方法，将一个函数的对象上 
下文从初始的上下文改变为由 thisObj 指定的新对象。”
它们的不同之处：
Apply：最多只能有两个参数――新this 对象和一个数组 argArray。如果给该方法传递多 个参数，
则把参数都写进这个数组里面，当然，即使只有一个参数，也要写进数组里面。
如 果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。
如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被 用作 thisObj， 
并且无法被传递任何参数
Call：则是直接的参数列表，主要用在js 对象各方法互相调用的时候，使当前 this 实例指 针保持一致，
或在特殊情况下需要改变this指针。如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。


call 语法：
函数名.call(thisArg[,arg1[,arg2[,...]]]);
参数：
thisArg,在函数运行时指定的this值。若传null或undefined，则函数内部this指向window。
arg1, arg2, ...指定的参数列表



apply 语法：
函数名.apply(thisArg,[argsArray])
thisArg,在 函数运行时指定的 this 值。若传null或undefined，则函数内部this指向window
argsArray,是一个数组，数组中存放函数调用时需要传入的实参



bind 语法：
var 变量 = 函数名.bind(thisArg,[,arg1[,arg2[,...]]]);
thisArg，在 函数运行时指定的 this 值。若传null或undefined，则函数内部this指向window
arg1, arg2, ...指定的参数列表
和call使用方式一样，不一样的时，使用bind时，借用的函数不会被立即执行，而是返回一个新的函数，若要执行，需要自己调用



function fn(a,b,c,d){
　　console.log(a,b,c,d);
}
//call
fn.call(null,1,2,3);
//apply
fn.apply(null,[1,2,3]);
//bind
var f = fn.bind(null,1,2,3);
f(4);

结果如下：
1 2 3 undefined
1 2 3 undefined
1 2 3 4

call就是挨个传值，apply传一个数组，bind也是挨个传值，但和call和apply还有一些不同，
使用call和apply会直接执行这个函数，而bind并不直接执行，而是将绑定好的this重新返回一个新函数
注意如果call和apply的第一个参数写的是null，那么this指向的是window对象
call和apply都是改变上下文中的this并立即执行这个函数，bind方法可以让对应的函数想什么时候调就什么时候调用，
并且可以将参数在执行的时候添加，这是它们的区别